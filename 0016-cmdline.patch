diff -up setools-3.3.7/man/sesearch.1.cmdline setools-3.3.7/man/sesearch.1
--- setools-3.3.7/man/sesearch.1.cmdline	2008-02-22 14:06:28.000000000 -0500
+++ setools-3.3.7/man/sesearch.1	2013-07-19 06:46:21.314068667 -0400
@@ -43,7 +43,7 @@ Search for allow rules.
 Search for neverallow rules.
 .IP "--auditallow"
 Search for auditallow rules.
-.IP "--dontaudit"
+.IP "-D, --dontaudit"
 Search for dontaudit rules.
 .IP "-T, --type"
 Search for type_transition, type_member, and type_change rules.
diff -up setools-3.3.7/secmds/sesearch.c.cmdline setools-3.3.7/secmds/sesearch.c
--- setools-3.3.7/secmds/sesearch.c.cmdline	2013-07-19 06:46:21.291068510 -0400
+++ setools-3.3.7/secmds/sesearch.c	2013-07-19 06:48:12.962830868 -0400
@@ -24,6 +24,7 @@
  */
 
 #include <config.h>
+#include <selinux/selinux.h>
 
 /* libapol */
 #include <apol/policy.h>
@@ -61,9 +62,8 @@ enum opt_values
 static struct option const longopts[] = {
 	{"allow", no_argument, NULL, 'A'},
 	{"neverallow", no_argument, NULL, RULE_NEVERALLOW},
-	{"audit", no_argument, NULL, RULE_AUDIT},
 	{"auditallow", no_argument, NULL, RULE_AUDITALLOW},
-	{"dontaudit", no_argument, NULL, RULE_DONTAUDIT},
+	{"dontaudit", no_argument, NULL, 'D'},
 	{"type", no_argument, NULL, 'T'},
 	{"role_allow", no_argument, NULL, RULE_ROLE_ALLOW},
 	{"role_trans", no_argument, NULL, RULE_ROLE_TRANS},
@@ -72,7 +72,6 @@ static struct option const longopts[] =
 
 	{"source", required_argument, NULL, 's'},
 	{"target", required_argument, NULL, 't'},
-	{"default", required_argument, NULL, 'D'},
 	{"role_source", required_argument, NULL, EXPR_ROLE_SOURCE},
 	{"role_target", required_argument, NULL, EXPR_ROLE_TARGET},
 	{"class", required_argument, NULL, 'c'},
@@ -129,7 +128,7 @@ void usage(const char *program_name, int
 	printf("  -A, --allow               allow rules\n");
 	printf("  --neverallow              neverallow rules\n");
 	printf("  --auditallow              auditallow rules\n");
-	printf("  --dontaudit               dontaudit rules\n");
+	printf("  -D, --dontaudit           dontaudit rules\n");
 	printf("  -T, --type                type_trans, type_member, and type_change\n");
 	printf("  --role_allow              role allow rules\n");
 	printf("  --role_trans              role_transition rules\n");
@@ -666,10 +665,6 @@ static void print_ft_results(const apol_
 	size_t i, num_filename_trans = 0;
 	const qpol_filename_trans_t *filename_trans = NULL;
 	char *tmp = NULL, *filename_trans_str = NULL, *expr = NULL;
-	char enable_char = ' ', branch_char = ' ';
-	qpol_iterator_t *iter = NULL;
-	const qpol_cond_t *cond = NULL;
-	uint32_t enabled = 0, list = 0;
 
 	if (!(num_filename_trans = apol_vector_get_size(v)))
 		goto cleanup;
@@ -677,7 +672,6 @@ static void print_ft_results(const apol_
 	fprintf(stdout, "Found %zd named file transition filename_trans:\n", num_filename_trans);
 
 	for (i = 0; i < num_filename_trans; i++) {
-		enable_char = branch_char = ' ';
 		if (!(filename_trans = apol_vector_get_element(v, i)))
 			goto cleanup;
 
@@ -962,7 +956,7 @@ int main(int argc, char **argv)
 
 	memset(&cmd_opts, 0, sizeof(cmd_opts));
 	cmd_opts.indirect = true;
-	while ((optc = getopt_long(argc, argv, "ATs:t:c:p:b:dD:RnSChV", longopts, NULL)) != -1) {
+	while ((optc = getopt_long(argc, argv, "ATs:t:c:p:b:dDRnSChV", longopts, NULL)) != -1) {
 		switch (optc) {
 		case 0:
 			break;
@@ -978,18 +972,6 @@ int main(int argc, char **argv)
 				exit(1);
 			}
 			break;
-		case 'D':	       /* source */
-			if (optarg == 0) {
-				usage(argv[0], 1);
-				printf("Missing source default type for -D (--default)\n");
-				exit(1);
-			}
-			cmd_opts.default_name = strdup(optarg);
-			if (!cmd_opts.default_name) {
-		
-				exit(1);
-			}
-			break;
 		case 't':	       /* target */
 			if (optarg == 0) {
 				usage(argv[0], 1);
@@ -1082,7 +1064,7 @@ int main(int argc, char **argv)
 		case RULE_AUDITALLOW:
 			cmd_opts.auditallow = true;
 			break;
-		case RULE_DONTAUDIT:
+		case 'D':
 			cmd_opts.dontaudit = true;
 			break;
 		case 'T':	       /* type */
